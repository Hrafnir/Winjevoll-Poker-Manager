// === 01: DOMContentLoaded LISTENER START ===
document.addEventListener('DOMContentLoaded', () => {
    // === 02: STATE VARIABLES START ===
    let currentTournamentId = getActiveTournamentId(); let state = null; let timerInterval = null; let realTimeInterval = null; let isModalOpen = false; let editBlindLevelCounter = 0;
    const standardPayouts = { 1: [100], 2: [65, 35], 3: [50, 30, 20], 4: [45, 27, 18, 10], 5: [40, 25, 16, 11, 8], 6: [38, 24, 15, 10, 8, 5], 7: [36, 23, 14, 10, 8, 5, 4], 8: [35, 22, 13, 9, 7, 6, 4, 4], 9: [34, 21, 13, 9, 7, 6, 4, 3, 3], 10: [33, 20, 12, 9, 7, 6, 5, 3, 3, 2] };
    let originalThemeBg = ''; let originalThemeText = ''; let originalLogoLayout = {}; let originalLayoutSettings = {};
    let blockSliderUpdates = false;
    // === 02: STATE VARIABLES END ===

    // === 03: DOM REFERENCES START ===
    const nameDisplay = document.getElementById('tournament-name-display'); const currentTimeDisplay = document.getElementById('current-time'); const btnEditSettings = document.getElementById('btn-edit-settings'); const btnBackToMainLive = document.getElementById('btn-back-to-main-live'); const timerDisplay = document.getElementById('timer-display'); const currentLevelDisplay = document.getElementById('current-level'); const nextBlindsDisplay = document.getElementById('next-blinds'); const blindsDisplay = document.getElementById('blinds-display'); const breakInfo = document.getElementById('break-info'); const playersRemainingDisplay = document.getElementById('players-remaining'); const totalEntriesDisplay = document.getElementById('total-entries'); const averageStackDisplay = document.getElementById('average-stack'); const lateRegStatusDisplay = document.getElementById('late-reg-status'); const prizeDisplayLive = document.getElementById('prize-display-live'); const totalPotPrizeSpan = document.getElementById('total-pot'); const startPauseButton = document.getElementById('btn-start-pause'); const prevLevelButton = document.getElementById('btn-prev-level'); const nextLevelButton = document.getElementById('btn-next-level'); const adjustTimeMinusButton = document.getElementById('btn-adjust-time-minus'); const adjustTimePlusButton = document.getElementById('btn-adjust-time-plus'); const lateRegButton = document.getElementById('btn-late-reg'); const playerListUl = document.getElementById('player-list'); const eliminatedPlayerListUl = document.getElementById('eliminated-player-list'); const activePlayerCountSpan = document.getElementById('active-player-count'); const eliminatedPlayerCountSpan = document.getElementById('eliminated-player-count'); const tableBalanceInfo = document.getElementById('table-balance-info'); const btnForceSave = document.getElementById('btn-force-save'); const endTournamentButton = document.getElementById('btn-end-tournament'); const modal = document.getElementById('edit-settings-modal'); const closeModalButton = document.getElementById('close-modal-button'); const editBlindStructureBody = document.getElementById('edit-blind-structure-body'); const btnAddEditLevel = document.getElementById('btn-add-edit-level'); const editPaidPlacesInput = document.getElementById('edit-paid-places'); const editPrizeDistTextarea = document.getElementById('edit-prize-distribution'); const btnGenerateEditPayout = document.getElementById('btn-generate-edit-payout'); const btnSaveEditedSettings = document.getElementById('btn-save-edited-settings'); const btnCancelEditSettings = document.getElementById('btn-cancel-edit-settings'); const activityLogUl = document.getElementById('activity-log-list');
    const bgRedSlider = document.getElementById('bgRedSlider'); const bgGreenSlider = document.getElementById('bgGreenSlider'); const bgBlueSlider = document.getElementById('bgBlueSlider'); const bgRedInput = document.getElementById('bgRedInput'); const bgGreenInput = document.getElementById('bgGreenInput'); const bgBlueInput = document.getElementById('bgBlueInput'); const bgColorPreview = document.getElementById('bg-color-preview'); const textRedSlider = document.getElementById('textRedSlider'); const textGreenSlider = document.getElementById('textGreenSlider'); const textBlueSlider = document.getElementById('textBlueSlider'); const textRedInput = document.getElementById('textRedInput'); const textGreenInput = document.getElementById('textGreenInput'); const textBlueInput = document.getElementById('textBlueInput'); const textColorPreview = document.getElementById('text-color-preview'); const logoSizeSlider = document.getElementById('logoSizeSlider'); const logoSizeInput = document.getElementById('logoSizeInput'); const logoPosSlider = document.getElementById('logoPosSlider'); const logoPosInput = document.getElementById('logoPosInput');
    const layoutSplitSlider = document.getElementById('layoutSplitSlider'); const layoutSplitInput = document.getElementById('layoutSplitInput'); const layoutLogoBasisSlider = document.getElementById('layoutLogoBasisSlider'); const layoutLogoBasisInput = document.getElementById('layoutLogoBasisInput'); const layoutBlindsBasisSlider = document.getElementById('layoutBlindsBasisSlider'); const layoutBlindsBasisInput = document.getElementById('layoutBlindsBasisInput'); const layoutInfoBasisSlider = document.getElementById('layoutInfoBasisSlider'); const layoutInfoBasisInput = document.getElementById('layoutInfoBasisInput');
    const bgHueSlider = document.getElementById('bgHueSlider'); const bgHueInput = document.getElementById('bgHueInput'); const bgSatSlider = document.getElementById('bgSatSlider'); const bgSatInput = document.getElementById('bgSatInput'); const bgLigSlider = document.getElementById('bgLigSlider'); const bgLigInput = document.getElementById('bgLigInput'); const textHueSlider = document.getElementById('textHueSlider'); const textHueInput = document.getElementById('textHueInput'); const textSatSlider = document.getElementById('textSatSlider'); const textSatInput = document.getElementById('textSatInput'); const textLigSlider = document.getElementById('textLigSlider'); const textLigInput = document.getElementById('textLigInput');
    const themeFavoritesSelect = document.getElementById('themeFavoritesSelect'); const btnLoadThemeFavorite = document.getElementById('btnLoadThemeFavorite'); const newThemeFavoriteNameInput = document.getElementById('newThemeFavoriteName'); const btnSaveThemeFavorite = document.getElementById('btnSaveThemeFavorite'); const btnDeleteThemeFavorite = document.getElementById('btnDeleteThemeFavorite');
    // === 03: DOM REFERENCES END ===

    // === 04: INITIALIZATION & VALIDATION START ===
    if (!currentTournamentId) { alert("Ingen aktiv turnering valgt."); window.location.href = 'index.html'; return; }
    state = loadTournamentState(currentTournamentId); if (!state) { alert(`Kunne ikke laste T ID: ${currentTournamentId}.`); clearActiveTournamentId(); window.location.href = 'index.html'; return; }
    console.log(`Loaded T: ${state.config.name} (ID: ${currentTournamentId})`, state); state.live = state.live || {}; state.live.isOnBreak = state.live.isOnBreak ?? false; state.live.timeRemainingInBreak = state.live.timeRemainingInBreak ?? 0; state.live.knockoutLog = state.live.knockoutLog || []; state.live.eliminatedPlayers = state.live.eliminatedPlayers || []; state.live.players = state.live.players || []; state.live.activityLog = state.live.activityLog || [];
    // === 04: INITIALIZATION & VALIDATION END ===

    // === 04b: THEME & LAYOUT APPLICATION START ===
    function applyThemeAndLayout(bgColor, textColor, logoLayout, layoutSettings) { document.documentElement.style.setProperty('--live-page-bg', bgColor); document.documentElement.style.setProperty('--live-page-text', textColor); const [r, g, b] = parseRgbString(bgColor); const brightness = (r * 299 + g * 587 + b * 114) / 1000; const borderColor = brightness < 128 ? 'rgba(255, 255, 255, 0.15)' : 'rgba(0, 0, 0, 0.1)'; document.documentElement.style.setProperty('--live-split-border', borderColor); document.documentElement.style.setProperty('--logo-max-height-percent', `${logoLayout.sizePercent}%`); document.documentElement.style.setProperty('--logo-object-position', `center ${logoLayout.positionPercent}%`); document.documentElement.style.setProperty('--live-split-left-basis', `${layoutSettings.leftBasisPercent}%`); document.documentElement.style.setProperty('--logo-area-basis', `${layoutSettings.logoBasisPercent}%`); document.documentElement.style.setProperty('--blinds-area-basis', `${layoutSettings.blindsBasisPercent}%`); document.documentElement.style.setProperty('--info-area-basis', `${layoutSettings.infoBasisPercent}%`); console.log(`Theme/Layout applied: BG=${bgColor}, Text=${textColor}, LogoSize=${logoLayout.sizePercent}%, LogoPos=${logoLayout.positionPercent}%, Split=${layoutSettings.leftBasisPercent}%...`); }
    const initialBgColor = loadThemeBgColor(); const initialTextColor = loadThemeTextColor(); const initialLogoLayout = loadLogoLayout(); const initialLayoutSettings = loadLayoutSettings();
    applyThemeAndLayout(initialBgColor, initialTextColor, initialLogoLayout, initialLayoutSettings);
    // === 04b: THEME & LAYOUT APPLICATION END ===

    // === 05: HELPER FUNCTIONS - FORMATTING START ===
    function formatTime(seconds) { if (isNaN(seconds) || seconds < 0) return "00:00"; const mins = Math.floor(seconds / 60); const secs = Math.floor(seconds % 60); return `${String(mins).padStart(2, '0')}:${String(secs).padStart(2, '0')}`; }
    function formatBlindsHTML(level) { if (!level) return `<span class="value">--</span>/<span class="value">--</span><span class="label">A:</span><span class="value">--</span>`; let a = ''; if (level.ante > 0) a = `<span class="label">A:</span><span class="value">${level.ante}</span>`; return `<span class="value">${level.sb}</span>/<span class="value">${level.bb}</span>${a}`; }
    function formatNextBlindsText(level) { if (!level) return "Slutt"; const a = level.ante > 0 ? `(${level.ante})` : ''; return `${level.sb}/${level.bb}${a}`; }
    function getPlayerNameById(playerId) { const player = state.live.players.find(p => p.id === playerId) || state.live.eliminatedPlayers.find(p => p.id === playerId); return player ? player.name : 'Ukjent'; }
    function roundToNearestValid(value, step = 100) { if (isNaN(value) || value <= 0) return step; const rounded = Math.round(value / step) * step; return Math.max(step, rounded); }
    // === 05: HELPER FUNCTIONS - FORMATTING END ===

    // === 06: HELPER FUNCTIONS - CALCULATIONS START ===
    function calculateTotalChips() { const b = state.live.totalEntries * state.config.startStack; const r = state.live.totalRebuys * (state.config.rebuyChips || 0); const a = state.live.totalAddons * (state.config.addonChips || 0); return b + r + a; }
    function calculateAverageStack() { const ap = state.live.players.length; if (ap === 0) return 0; const tc = calculateTotalChips(); return Math.round(tc / ap); }
    function calculatePrizes() { const p = []; const pfp = state.live.totalPot - (state.config.type === 'knockout' ? state.live.totalEntries * (state.config.bountyAmount || 0) : 0); if (pfp <= 0 || !state.config.prizeDistribution || state.config.prizeDistribution.length !== state.config.paidPlaces) return p; let sum = 0; for (let i = 0; i < state.config.paidPlaces; i++) { const pct = state.config.prizeDistribution[i] || 0; let amt; if (i === state.config.paidPlaces - 1) { amt = Math.max(0, pfp - sum); } else { amt = Math.floor((pfp * pct) / 100); } if (amt > 0 || (p.length === 0 && state.config.paidPlaces === 1)) { p.push({ place: i + 1, amount: amt, percentage: pct }); sum += amt; } else if (p.length > 0) { p.push({ place: i + 1, amount: 0, percentage: pct }); } else break; if(p.length >= state.config.paidPlaces) break; } return p; }
    // === 06: HELPER FUNCTIONS - CALCULATIONS END ===

    // === 07: HELPER FUNCTIONS - TABLE MANAGEMENT START ===
    function assignTableSeat(player, excludeTableNum = null) { /* ... (No change) ... */ const tables = {}; let minTableNum = -1; state.live.players.forEach(p => { if (p.id !== player.id && p.table !== excludeTableNum) { tables[p.table] = (tables[p.table] || 0) + 1; } }); const sortedTables = Object.entries(tables).map(([num, count]) => ({ tableNum: parseInt(num), count: count })).sort((a, b) => a.count - b.count); for (const tableInfo of sortedTables) { if (tableInfo.tableNum !== excludeTableNum && tableInfo.count < state.config.playersPerTable) { minTableNum = tableInfo.tableNum; break; } } if (minTableNum === -1) { const existingTableNumbers = Object.keys(tables).map(Number); let nextTable = existingTableNumbers.length > 0 ? Math.max(...existingTableNumbers) + 1 : 1; if(nextTable === excludeTableNum) nextTable++; minTableNum = nextTable; player.table = minTableNum; player.seat = 1; } else { const occupiedSeats = state.live.players.filter(p => p.table === minTableNum).map(p => p.seat); let seatNum = 1; while (occupiedSeats.includes(seatNum)) { seatNum++; } if (seatNum > state.config.playersPerTable) { console.error(`ERROR: No seat on table ${minTableNum}`); seatNum = occupiedSeats.length + 1; } player.table = minTableNum; player.seat = seatNum; } console.log(`Assigned ${player.name} to T${player.table} S${player.seat} (Excluded T${excludeTableNum})`); }
    function reassignAllSeats(targetTableNum) { /* ... (No change) ... */ logActivity(state.live.activityLog, `Finalebord (Bord ${targetTableNum})! Trekker nye seter...`); const playersToReseat = state.live.players; const numPlayers = playersToReseat.length; const seats = Array.from({ length: numPlayers }, (_, i) => i + 1); for (let i = seats.length - 1; i > 0; i--) { const j = Math.floor(Math.random() * (i + 1)); [seats[i], seats[j]] = [seats[j], seats[i]]; } playersToReseat.forEach((player, index) => { player.table = targetTableNum; player.seat = seats[index]; logActivity(state.live.activityLog, ` -> ${player.name} får sete ${player.seat}.`); }); state.live.players.sort((a, b) => a.seat - b.seat); console.log("Final table seats reassigned."); }
    function checkAndHandleTableBreak() { /* ... (No change) ... */ const apc = state.live.players.length; const ppt = state.config.playersPerTable; const cTS = new Set(state.live.players.map(p => p.table)); const cTC = cTS.size; const tT = Math.ceil(apc / ppt); const fTS = ppt; let actionTaken = false; let redrawPerformed = false; if (apc <= fTS && cTC > 1) { const tFTN = 1; logActivity(state.live.activityLog, `Finalebord! Flytter til B${tFTN}...`); alert(`Finalebord! Flytter til B${tFTN}.`); state.live.players.forEach(p => p.table = tFTN); reassignAllSeats(tFTN); actionTaken = true; redrawPerformed = true; } else if (cTC > tT && cTC > 1) { const tables = {}; state.live.players.forEach(p => { tables[p.table] = (tables[p.table] || 0) + 1; }); const sortedTables = Object.entries(tables).map(([num, count]) => ({ tableNum: parseInt(num), count: count })).sort((a, b) => a.count - b.count); const tTB = sortedTables[0].tableNum; const msg = `Slår sammen bord! Flytter fra B${tTB}.`; logActivity(state.live.activityLog, msg); alert(msg); const ptm = state.live.players.filter(p => p.table === tTB); ptm.forEach(p => { const oT = p.table; const oS = p.seat; p.table = 0; assignTableSeat(p, tTB); logActivity(state.live.activityLog, ` -> Flyttet ${p.name} (B${oT}S${oS}) til B${p.table}S${p.seat}.`); }); state.live.players.sort((a, b) => a.table === b.table ? a.seat - b.seat : a.table - b.table); actionTaken = true; } if (actionTaken) { updateUI(); saveTournamentState(currentTournamentId, state); } return actionTaken; }
    function balanceTables() { /* ... (No change) ... */ if(state.live.status==='finished'||state.live.players.length<=state.config.playersPerTable){tableBalanceInfo.classList.add('hidden');return false;} let balancingPerformed=false; while(true){const tables={}; state.live.players.forEach(p=>{tables[p.table]=(tables[p.table]||0)+1;}); const tableCounts=Object.entries(tables).map(([num,count])=>({tableNum:parseInt(num),count:count})).filter(tc=>tc.count>0); if(tableCounts.length<2){tableBalanceInfo.classList.add('hidden');break;} tableCounts.sort((a,b)=>a.count-b.count); const minTable=tableCounts[0]; const maxTable=tableCounts[tableCounts.length-1]; if(maxTable.count-minTable.count<2){tableBalanceInfo.classList.add('hidden');break;} balancingPerformed=true; tableBalanceInfo.classList.remove('hidden'); console.log(`Balancing: Max T${maxTable.tableNum}(${maxTable.count}), Min T${minTable.tableNum}(${minTable.count})`); const playersOnMaxTable=state.live.players.filter(p=>p.table===maxTable.tableNum); if(playersOnMaxTable.length===0){console.error("Balancing Error!");break;} const playerToMove=playersOnMaxTable[Math.floor(Math.random()*playersOnMaxTable.length)]; const occupiedSeatsMin=state.live.players.filter(p=>p.table===minTable.tableNum).map(p=>p.seat); let newSeat=1; while(occupiedSeatsMin.includes(newSeat)){newSeat++;} if(newSeat>state.config.playersPerTable){console.error(`Balancing Error: No seat on table ${minTable.tableNum}.`); alert(`Balanseringsfeil bord ${minTable.tableNum}.`);break;} const oldTable=playerToMove.table; const oldSeat=playerToMove.seat; const message=`Balansering: ${playerToMove.name} flyttes fra B${oldTable} S${oldSeat} til B${minTable.tableNum} S${newSeat}.`; playerToMove.table=minTable.tableNum; playerToMove.seat=newSeat; logActivity(state.live.activityLog,message); state.live.players.sort((a,b)=>a.table===b.table?a.seat-b.seat:a.table-b.table); saveTournamentState(currentTournamentId,state); updateUI(); alert(message);} if(balancingPerformed){console.log("Balancing done.");return true;} return false;}
    // === 07: HELPER FUNCTIONS - TABLE MANAGEMENT END ===

    // === 07b: HELPER FUNCTIONS - LOGGING START ===
    function logActivity(logArray, message) { if (!logArray) logArray = []; const timestamp = new Date().toLocaleTimeString('nb-NO', { hour: '2-digit', minute: '2-digit'}); logArray.unshift({ timestamp, message }); const MAX_LOG_ENTRIES = 50; if (logArray.length > MAX_LOG_ENTRIES) { logArray.pop(); } renderActivityLog(); }
    function renderActivityLog() { if (!activityLogUl) return; activityLogUl.innerHTML = ''; if (!state?.live?.activityLog || state.live.activityLog.length === 0) { activityLogUl.innerHTML = '<li>Loggen er tom.</li>'; return; } state.live.activityLog.forEach(entry => { const li = document.createElement('li'); li.innerHTML = `<span class="log-time">[${entry.timestamp}]</span> ${entry.message}`; activityLogUl.appendChild(li); }); }
    // === 07b: HELPER FUNCTIONS - LOGGING END ===

    // === 08: UI UPDATE FUNCTIONS START ===
    function renderPlayerList() { /* ... (No change) ... */ playerListUl.innerHTML = ''; eliminatedPlayerListUl.innerHTML = ''; const cln = state.live.currentLevelIndex + 1; const rbA = state.config.type === 'rebuy' && cln <= state.config.rebuyLevels; const adA = state.config.type === 'rebuy' && cln > state.config.rebuyLevels; const canEdit = state.live.status !== 'finished'; state.live.players.sort((a, b) => a.table === b.table ? a.seat - b.seat : a.table - b.table).forEach(p => { const li = document.createElement('li'); let i = `${p.name} <span class="player-details">(B${p.table} S${p.seat})</span>`; if (p.rebuys > 0) i += ` <span class="player-details">[${p.rebuys}R]</span>`; if (p.addon) i += ` <span class="player-details">[A]</span>`; if (state.config.type === 'knockout' && p.knockouts > 0) i += ` <span class="player-details">(KOs: ${p.knockouts})</span>`; let a = ''; if (canEdit) { a += `<button class="btn-edit-player small-button" data-player-id="${p.id}" title="Rediger Navn">✏️</button>`; if (rbA) a += `<button class="btn-rebuy small-button" data-player-id="${p.id}" title="Rebuy">R</button>`; if (adA && !p.addon) a += `<button class="btn-addon small-button" data-player-id="${p.id}" title="Addon">A</button>`; a += `<button class="btn-eliminate small-button danger-button" data-player-id="${p.id}" title="Eliminer">X</button>`; } li.innerHTML = `<span class="item-name">${i}</span><div class="list-actions player-actions">${a}</div>`; playerListUl.appendChild(li); }); state.live.eliminatedPlayers.sort((a, b) => (a.place ?? Infinity) - (b.place ?? Infinity)).forEach(p => { const li = document.createElement('li'); let e = `${p.place ?? '?'}. ${p.name}`; if (p.rebuys > 0) e += ` <span class="player-details">[${p.rebuys}R]</span>`; if (p.addon) e += ` <span class="player-details">[A]</span>`; if (state.config.type === 'knockout' && p.knockouts > 0) e += ` <span class="player-details">(KOs: ${p.knockouts})</span>`; if (p.eliminatedBy) e += ` <span class="player-details">(av ${getPlayerNameById(p.eliminatedBy)})</span>`; li.innerHTML = `<span class="item-name">${e}</span><div class="list-actions player-actions">${canEdit ? `<button class="btn-restore small-button warning-button" data-player-id="${p.id}" title="Gjenopprett">↩️</button>` : ''}</div>`; eliminatedPlayerListUl.appendChild(li); }); activePlayerCountSpan.textContent = state.live.players.length; eliminatedPlayerCountSpan.textContent = state.live.eliminatedPlayers.length; playerListUl.querySelectorAll('.btn-edit-player').forEach(btn => btn.onclick = handleEditPlayer); playerListUl.querySelectorAll('.btn-rebuy').forEach(btn => btn.onclick = handleRebuy); playerListUl.querySelectorAll('.btn-addon').forEach(btn => btn.onclick = handleAddon); playerListUl.querySelectorAll('.btn-eliminate').forEach(btn => btn.onclick = handleEliminate); eliminatedPlayerListUl.querySelectorAll('.btn-restore').forEach(btn => btn.onclick = handleRestore); }
    function displayPrizes() { /* ... (No change) ... */ if (!prizeDisplayLive) return; const prizeData = calculatePrizes(); const potSpan = prizeDisplayLive.querySelector('#total-pot'); if(potSpan) potSpan.textContent = state.live.totalPot.toLocaleString('nb-NO'); else prizeDisplayLive.querySelector('h3').textContent = `Premiefordeling (Totalpott: ${state.live.totalPot.toLocaleString('nb-NO')} kr)`; const existingOl = prizeDisplayLive.querySelector('ol'); if(existingOl) existingOl.remove(); const existingP = prizeDisplayLive.querySelector('p'); if(existingP) existingP.remove(); if (prizeData.length > 0) { const ol = document.createElement('ol'); prizeData.forEach(p => { const li = document.createElement('li'); li.textContent = `${p.place}. Plass: ${p.amount.toLocaleString('nb-NO')} kr (${p.percentage}%)`; ol.appendChild(li); }); prizeDisplayLive.appendChild(ol); prizeDisplayLive.classList.remove('hidden'); } else { const p = document.createElement('p'); const pfp = state.live.totalPot - (state.config.type === 'knockout' ? state.live.totalEntries * (state.config.bountyAmount || 0) : 0); if (pfp > 0 && (!state.config.prizeDistribution || state.config.prizeDistribution.length !== state.config.paidPlaces)) { p.textContent = 'Premiefordeling ikke (korrekt) definert.'; } else { p.textContent = 'Ingen premiepott å fordele ennå.'; } prizeDisplayLive.appendChild(p); prizeDisplayLive.classList.add('hidden'); } }
    function updateUI() { /* ... (No change needed) ... */ const elementsToCheck = { nameDisplay, currentTimeDisplay, timerDisplay, currentLevelDisplay, nextBlindsDisplay, blindsDisplay, breakInfo, playersRemainingDisplay, totalEntriesDisplay, averageStackDisplay, lateRegStatusDisplay, lateRegButton, startPauseButton, prevLevelButton, nextLevelButton, adjustTimeMinusButton, adjustTimePlusButton, btnEditSettings, endTournamentButton, prizeDisplayLive, totalPotPrizeSpan, playerListUl, eliminatedPlayerListUl, activePlayerCountSpan, eliminatedPlayerCountSpan, tableBalanceInfo, activityLogUl }; let missingElement = null; for (const key in elementsToCheck) { if (!elementsToCheck[key]) { missingElement = key; break; } } if (missingElement) { console.error(`CRITICAL ERROR: UI element "${missingElement}" missing.`); if(timerInterval) clearInterval(timerInterval); if(realTimeInterval) clearInterval(realTimeInterval); document.body.innerHTML = `<h1 style="color:red; text-align:center; margin-top: 50px;">UI Feil! Element "${missingElement}" mangler.</h1>`; return; } nameDisplay.textContent = state.config.name; currentTimeDisplay.textContent = new Date().toLocaleTimeString('nb-NO', { hour: '2-digit', minute: '2-digit', second: '2-digit' }); const cLI = state.live.currentLevelIndex; const cL = state.config.blindLevels[cLI]; let nextBlindLevel = state.config.blindLevels[cLI + 1]; currentLevelDisplay.textContent = `(Nivå ${cL ? cL.level : 'N/A'})`; nextBlindsDisplay.textContent = formatNextBlindsText(nextBlindLevel); if (state.live.isOnBreak) { timerDisplay.textContent = formatTime(state.live.timeRemainingInBreak); blindsDisplay.innerHTML = ''; blindsDisplay.classList.add('hidden'); breakInfo.classList.remove('hidden'); breakInfo.textContent = `PAUSE`; } else { timerDisplay.textContent = formatTime(state.live.timeRemainingInLevel); blindsDisplay.classList.remove('hidden'); breakInfo.classList.add('hidden'); blindsDisplay.innerHTML = formatBlindsHTML(cL); } const apc = state.live.players.length; playersRemainingDisplay.textContent = apc; totalEntriesDisplay.textContent = state.live.totalEntries; averageStackDisplay.textContent = calculateAverageStack().toLocaleString('nb-NO'); const cLN = cLI + 1; const lRO = cLN <= state.config.lateRegLevel && state.config.lateRegLevel > 0 && state.live.status !== 'finished'; if (state.config.lateRegLevel > 0) { lateRegStatusDisplay.textContent = `Late Reg: ${lRO ? `Åpen t.o.m. nivå ${state.config.lateRegLevel}` : 'Stengt'}`; } else { lateRegStatusDisplay.textContent = 'Late Reg: N/A'; } lateRegButton.disabled = !lRO || state.live.status !== 'running'; startPauseButton.textContent = state.live.status === 'running' ? 'Pause Klokke' : 'Start Klokke'; startPauseButton.disabled = state.live.status === 'finished'; prevLevelButton.disabled = cLI <= 0 || state.live.status === 'finished'; nextLevelButton.disabled = cLI >= state.config.blindLevels.length - 1 || state.live.status === 'finished'; adjustTimeMinusButton.disabled = state.live.status === 'finished'; adjustTimePlusButton.disabled = state.live.status === 'finished'; btnEditSettings.disabled = state.live.status === 'finished'; endTournamentButton.disabled = state.live.status === 'finished'; renderPlayerList(); displayPrizes(); renderActivityLog(); }
    // === 08: UI UPDATE FUNCTIONS END ===

    // === 09: TIMER LOGIC START ===
    function tick() { /* ... (No change needed) ... */ if(state.live.status!=='running')return; if(state.live.isOnBreak){state.live.timeRemainingInBreak--; timerDisplay.textContent=formatTime(state.live.timeRemainingInBreak); if(state.live.timeRemainingInBreak<0){state.live.isOnBreak=false; state.live.currentLevelIndex++; if(state.live.currentLevelIndex>=state.config.blindLevels.length){finishTournament();return;} const nl=state.config.blindLevels[state.live.currentLevelIndex]; state.live.timeRemainingInLevel=nl.duration*60; logActivity(state.live.activityLog,`Pause over. Nivå ${nl.level} starter.`); updateUI(); saveTournamentState(currentTournamentId,state);} else if(state.live.timeRemainingInBreak%15===0){saveTournamentState(currentTournamentId,state);}} else{state.live.timeRemainingInLevel--; timerDisplay.textContent=formatTime(state.live.timeRemainingInLevel); if(state.live.timeRemainingInLevel<0){const cl=state.config.blindLevels[state.live.currentLevelIndex]; const pm=cl?.pauseMinutes||0; if(pm>0){state.live.isOnBreak=true; state.live.timeRemainingInBreak=pm*60; logActivity(state.live.activityLog,`Nivå ${cl.level} ferdig. Starter ${pm} min pause.`); updateUI(); saveTournamentState(currentTournamentId,state);} else{state.live.currentLevelIndex++; if(state.live.currentLevelIndex>=state.config.blindLevels.length){finishTournament();return;} const nl=state.config.blindLevels[state.live.currentLevelIndex]; state.live.timeRemainingInLevel=nl.duration*60; logActivity(state.live.activityLog,`Nivå ${nl.level} starter.`); updateUI(); saveTournamentState(currentTournamentId,state);}} else if(state.live.timeRemainingInLevel>0&&state.live.timeRemainingInLevel%30===0){saveTournamentState(currentTournamentId,state);}}}
    function startRealTimeClock() { /* ... (No change needed) ... */ if (realTimeInterval) clearInterval(realTimeInterval); realTimeInterval = setInterval(() => { if(currentTimeDisplay) currentTimeDisplay.textContent = new Date().toLocaleTimeString('nb-NO', { hour: '2-digit', minute: '2-digit', second: '2-digit' }); }, 1000); }
    // === 09: TIMER LOGIC END ===

    // === 10: EVENT HANDLERS - CONTROLS START ===
    function handleStartPause() { /* ... (No change needed) ... */ if(state.live.status==='finished')return; if(state.live.status==='paused'){state.live.status='running'; if(!timerInterval)timerInterval=setInterval(tick,1000); logActivity(state.live.activityLog,"Klokke startet.");} else{state.live.status='paused'; logActivity(state.live.activityLog,"Klokke pauset."); saveTournamentState(currentTournamentId,state);} updateUI();}
    function handleAdjustTime(deltaSeconds) { /* ... (No change needed) ... */ if(state.live.status==='finished')return; let target=state.live.isOnBreak?'timeRemainingInBreak':'timeRemainingInLevel'; let limit=state.live.isOnBreak?Infinity:(state.config.blindLevels[state.live.currentLevelIndex]?.duration*60); state.live[target]+=deltaSeconds; state.live[target]=Math.max(0,state.live[target]); if(limit!==undefined)state.live[target]=Math.min(limit,state.live[target]); logActivity(state.live.activityLog,`Tid justert ${deltaSeconds>0?'+':''}${deltaSeconds/60} min.`); updateUI(); saveTournamentState(currentTournamentId,state);}
    function handleAdjustLevel(deltaIndex) { /* ... (No change needed) ... */ if(state.live.status==='finished')return; const newIndex=state.live.currentLevelIndex+deltaIndex; if(newIndex>=0&&newIndex<state.config.blindLevels.length){const oldLevelNum=state.config.blindLevels[state.live.currentLevelIndex]?.level||'?'; const newLevel=state.config.blindLevels[newIndex]; state.live.currentLevelIndex=newIndex; state.live.timeRemainingInLevel=newLevel.duration*60; state.live.isOnBreak=false; state.live.timeRemainingInBreak=0; logActivity(state.live.activityLog,`Nivå manuelt endret: ${oldLevelNum} -> ${newLevel.level}.`); updateUI(); saveTournamentState(currentTournamentId,state);} else{console.warn("Cannot adjust level.");}}
    function handleEndTournament() { /* ... (No change needed) ... */ if(state.live.status==='finished'){alert("Turneringen er allerede fullført.");return;} if(confirm("Markere turneringen som fullført?"))finishTournament();}
    function handleForceSave() { /* ... (No change needed) ... */ if(state){if(saveTournamentState(currentTournamentId,state)){btnForceSave.textContent="Lagret!"; setTimeout(()=>{btnForceSave.textContent="Lagre Nå";},1500);}else{alert("Lagring feilet!");}}}
    function handleBackToMain() { /* ... (No change needed) ... */ if(state&&state.live.status!=='finished')saveTournamentState(currentTournamentId,state); window.location.href='index.html';}
    // === 10: EVENT HANDLERS - CONTROLS END ===

    // === 11: EVENT HANDLERS - PLAYER ACTIONS START ===
    function handleRebuy(event){ /* ... */ const pId=parseInt(event.target.dataset.playerId); const p=state.live.players.find(pl=>pl.id===pId); const cLN=state.live.currentLevelIndex+1; if(!p||state.config.type!=='rebuy'||!(cLN<=state.config.rebuyLevels)){alert("Re-buy N/A.");return;} if(confirm(`Re-buy (${state.config.rebuyCost} kr) for ${p.name}?`)){ p.rebuys=(p.rebuys||0)+1; state.live.totalPot+=state.config.rebuyCost; state.live.totalEntries++; state.live.totalRebuys++; logActivity(state.live.activityLog,`${p.name} tok Re-buy.`); updateUI(); saveTournamentState(currentTournamentId,state);}}
    function handleAddon(event){ /* ... */ const pId=parseInt(event.target.dataset.playerId); const p=state.live.players.find(pl=>pl.id===pId); const cLN=state.live.currentLevelIndex+1; const isAP=cLN>state.config.rebuyLevels; if(!p||state.config.type!=='rebuy'||!isAP||p.addon){alert("Add-on N/A.");return;} if(confirm(`Add-on (${state.config.addonCost} kr) for ${p.name}?`)){ p.addon=true; state.live.totalPot+=state.config.addonCost; state.live.totalAddons++; logActivity(state.live.activityLog,`${p.name} tok Add-on.`); updateUI(); saveTournamentState(currentTournamentId,state);}}
    function handleEliminate(event){ /* ... */ if(state.live.status==='finished')return; const pId=parseInt(event.target.dataset.playerId); const ap=state.live.players; const pI=ap.findIndex(p=>p.id===pId); if(pI===-1)return; if(ap.length<=1){alert("Kan ikke eliminere siste spiller.");return;} const p=ap[pI]; let eById=null; let eName=null; if(state.config.type==='knockout'&&(state.config.bountyAmount||0)>0&&ap.length>1){const op=ap.filter(pl=>pl.id!==pId).map(pl=>`${pl.name} (B${pl.table}S${pl.seat})`); const pm=`Hvem slo ut ${p.name}?\n\nAktive:\n - ${op.join("\n - ")}`; const eIn=prompt(pm); if(eIn?.trim()){const eL=eIn.trim().toLowerCase(); const el=ap.find(pl=>pl.id!==pId&&pl.name.toLowerCase()===eL); if(el){eById=el.id; el.knockouts=(el.knockouts||0)+1; eName=el.name; state.live.knockoutLog.push({eliminatedPlayerId:p.id,eliminatedByPlayerId:el.id});} else{alert(`Fant ikke "${eIn}".`);}}} if(confirm(`Eliminere ${p.name}?`)){ p.eliminated=true; p.eliminatedBy=eById; p.place=ap.length; state.live.eliminatedPlayers.push(p); ap.splice(pI,1); const et=eName?` av ${eName}`:''; logActivity(state.live.activityLog,`${p.name} slått ut (${p.place}.plass${et}).`); const broke=checkAndHandleTableBreak(); if(!broke){const balanced=balanceTables(); if(!balanced){updateUI(); saveTournamentState(currentTournamentId, state);}} else {updateUI(); saveTournamentState(currentTournamentId, state);} if(state.live.players.length<=1){finishTournament();}}}
    function handleRestore(event){ /* ... */ if(state.live.status==='finished'){alert("Kan ikke gjenopprette.");return;} const pId=parseInt(event.target.dataset.playerId); const pI=state.live.eliminatedPlayers.findIndex(p=>p.id===pId); if(pI===-1)return; const p=state.live.eliminatedPlayers[pI]; if(confirm(`Gjenopprette ${p.name} (${p.place}.plass)?`)){const eBy=p.eliminatedBy; const oP=p.place; p.eliminated=false; p.eliminatedBy=null; p.place=null; state.live.eliminatedPlayers.splice(pI,1); state.live.players.push(p); if(state.config.type==='knockout'&&eBy){const el=state.live.players.find(pl=>pl.id===eBy)||state.live.eliminatedPlayers.find(pl=>pl.id===eBy); if(el?.knockouts>0)el.knockouts--; const lI=state.live.knockoutLog.findIndex(l=>l.eliminatedPlayerId===p.id&&l.eliminatedByPlayerId===eBy); if(lI>-1)state.live.knockoutLog.splice(lI,1);} assignTableSeat(p); logActivity(state.live.activityLog,`${p.name} gjenopprettet fra ${oP}.plass.`); const broke=checkAndHandleTableBreak(); if(!broke){const balanced=balanceTables(); if(!balanced){updateUI(); saveTournamentState(currentTournamentId, state);}} else { updateUI(); saveTournamentState(currentTournamentId, state); } }}
    function handleEditPlayer(event){ /* ... */ if(state.live.status==='finished')return; const pId=parseInt(event.target.dataset.playerId); const p=state.live.players.find(pl=>pl.id===pId); if(!p)return; const oN=p.name; const nN=prompt(`Endre navn for ${oN}:`,oN); if(nN?.trim()&&nN.trim()!==oN){p.name=nN.trim(); logActivity(state.live.activityLog,`Navn endret: ${oN} -> ${p.name}.`); renderPlayerList(); saveTournamentState(currentTournamentId,state);}else if(nN==="")alert("Navn tomt.");}
    function handleLateRegClick() { /* ... */ if(state.live.status==='finished')return; const cLN=state.live.currentLevelIndex+1; const lRO=cLN<=state.config.lateRegLevel&&state.config.lateRegLevel>0; if(!lRO){alert("Late reg stengt.");return;} if(state.live.status!=='running'){alert("Start klokke for late reg.");return;} const name=prompt("Navn for late reg:"); if(name?.trim()){const cost=state.config.buyIn; const p={id:generateUniqueId('p'),name:name.trim(),stack:state.config.startStack,table:0,seat:0,rebuys:0,addon:false,eliminated:false,eliminatedBy:null,place:null,knockouts:0}; state.live.players.push(p); assignTableSeat(p); state.live.totalPot+=cost; state.live.totalEntries++; logActivity(state.live.activityLog,`${p.name} registrert (Late Reg).`); const broke=checkAndHandleTableBreak(); if(!broke){const balanced=balanceTables(); if(!balanced){updateUI(); saveTournamentState(currentTournamentId, state);}} else {updateUI(); saveTournamentState(currentTournamentId, state);}}}
    // === 11: EVENT HANDLERS - PLAYER ACTIONS END ===

    // === 12: EVENT HANDLERS - MODAL & EDIT SETTINGS START ===
    function openEditModal() { /* ... (Updated to populate layout sliders) ... */ if(state.live.status==='finished'||isModalOpen)return; console.log("Opening edit modal"); originalThemeBg=loadThemeBgColor(); originalThemeText=loadThemeTextColor(); originalLogoLayout=loadLogoLayout(); originalLayoutSettings=loadLayoutSettings(); editBlindStructureBody.innerHTML=''; editBlindLevelCounter=0; state.config.blindLevels.forEach(level=>addEditBlindLevelRow(level)); updateEditLevelNumbers(); editPaidPlacesInput.value=state.config.paidPlaces; editPrizeDistTextarea.value=state.config.prizeDistribution.join(', '); const [bgR,bgG,bgB]=parseRgbString(originalThemeBg); const bgHSL=rgbToHsl(bgR,bgG,bgB); bgRedSlider.value=bgRedInput.value=bgR; bgGreenSlider.value=bgGreenInput.value=bgG; bgBlueSlider.value=bgBlueInput.value=bgB; bgHueSlider.value=bgHueInput.value=bgHSL.h; bgSatSlider.value=bgSatInput.value=bgHSL.s; bgLigSlider.value=bgLigInput.value=bgHSL.l; const [textR,textG,textB]=parseRgbString(originalThemeText); const textHSL=rgbToHsl(textR,textG,textB); textRedSlider.value=textRedInput.value=textR; textGreenSlider.value=textGreenInput.value=textG; textBlueSlider.value=textBlueInput.value=textB; textHueSlider.value=textHueInput.value=textHSL.h; textSatSlider.value=textSatInput.value=textHSL.s; textLigSlider.value=textLigInput.value=textHSL.l; layoutSplitInput.value=layoutSplitSlider.value=originalLayoutSettings.leftBasisPercent; layoutLogoBasisInput.value=layoutLogoBasisSlider.value=originalLayoutSettings.logoBasisPercent; layoutBlindsBasisInput.value=layoutBlindsBasisSlider.value=originalLayoutSettings.blindsBasisPercent; layoutInfoBasisInput.value=layoutInfoBasisSlider.value=originalLayoutSettings.infoBasisPercent; logoSizeInput.value=logoSizeSlider.value=originalLogoLayout.sizePercent; logoPosInput.value=logoPosSlider.value=originalLogoLayout.positionPercent; populateThemeFavorites(); updateColorAndLayoutPreviews(); addThemeAndLayoutListeners(); modal.classList.remove('hidden'); isModalOpen=true; }
    function closeEditModal(revert=false) { /* ... (Updated to revert layout) ... */ if(revert) applyThemeAndLayout(originalThemeBg, originalThemeText, originalLogoLayout, originalLayoutSettings); removeThemeAndLayoutListeners(); modal.classList.add('hidden'); isModalOpen=false; console.log("Edit modal closed."); }
    function addEditBlindLevelRow(levelData={}){/* ... */ editBlindLevelCounter++; const row=editBlindStructureBody.insertRow(); row.dataset.levelNumber=editBlindLevelCounter; const sb=levelData.sb??''; const bb=levelData.bb??''; const ante=levelData.ante??0; const duration=levelData.duration??(state.config.blindLevels?.[0]?.duration||20); const pauseMinutes=levelData.pauseMinutes??0; const isPastLevel=levelData.level<=state.live.currentLevelIndex+1&&!state.live.isOnBreak; row.innerHTML=`<td><span class="level-number">${editBlindLevelCounter}</span> ${isPastLevel?'<small>(Låst)</small>':''}</td><td><input type="number" class="sb-input" value="${sb}" min="0" step="100" ${isPastLevel?'disabled':''}></td><td><input type="number" class="bb-input" value="${bb}" min="0" step="100" ${isPastLevel?'disabled':''}></td><td><input type="number" class="ante-input" value="${ante}" min="0" step="25" ${isPastLevel?'disabled':''}></td><td><input type="number" class="duration-input" value="${duration}" min="1" ${isPastLevel?'disabled':''}></td><td><input type="number" class="pause-duration-input" value="${pauseMinutes}" min="0" ${isPastLevel?'disabled':''}></td><td><button type="button" class="btn-remove-level" title="Fjern nivå ${editBlindLevelCounter}" ${isPastLevel?'disabled':''}>X</button></td>`; const removeBtn=row.querySelector('.btn-remove-level'); const bbInput=row.querySelector('.bb-input'); const sbInput=row.querySelector('.sb-input'); if(!isPastLevel){removeBtn.onclick=()=>{row.remove(); updateEditLevelNumbers();}; bbInput.onchange=()=>{const bbVal=parseInt(bbInput.value); if(!isNaN(bbVal)&&bbVal>0)sbInput.value=roundToNearestValid(Math.floor(bbVal/2),100);};} else{row.querySelectorAll('input').forEach(inp=>inp.disabled=true); removeBtn.disabled=true;}}
    function updateEditLevelNumbers(){/* ... */ const rows=editBlindStructureBody.querySelectorAll('tr'); rows.forEach((row,index)=>{const levelNum=index+1; row.dataset.levelNumber=levelNum; row.querySelector('.level-number').textContent=levelNum; row.querySelector('.btn-remove-level').title=`Fjern nivå ${levelNum}`;}); editBlindLevelCounter=rows.length;}
    function generateEditPayout(){/* ... */ const places=parseInt(editPaidPlacesInput.value)||0; if(places>0&&standardPayouts[places]){editPrizeDistTextarea.value=standardPayouts[places].join(', ');}else{editPrizeDistTextarea.value='';}}
    function syncRgbFromHsl(typePrefix) { if (blockSliderUpdates) return; const h = parseInt(document.getElementById(`${typePrefix}HueInput`).value); const s = parseInt(document.getElementById(`${typePrefix}SatInput`).value); const l = parseInt(document.getElementById(`${typePrefix}LigInput`).value); const rgbString = hslToRgb(h, s, l); const [r, g, b] = parseRgbString(rgbString); blockSliderUpdates = true; document.getElementById(`${typePrefix}RedSlider`).value = document.getElementById(`${typePrefix}RedInput`).value = r; document.getElementById(`${typePrefix}GreenSlider`).value = document.getElementById(`${typePrefix}GreenInput`).value = g; document.getElementById(`${typePrefix}BlueSlider`).value = document.getElementById(`${typePrefix}BlueInput`).value = b; blockSliderUpdates = false; return rgbString; }
    function syncHslFromRgb(typePrefix) { if (blockSliderUpdates) return; const r = parseInt(document.getElementById(`${typePrefix}RedInput`).value); const g = parseInt(document.getElementById(`${typePrefix}GreenInput`).value); const b = parseInt(document.getElementById(`${typePrefix}BlueInput`).value); const hsl = rgbToHsl(r, g, b); blockSliderUpdates = true; document.getElementById(`${typePrefix}HueSlider`).value = document.getElementById(`${typePrefix}HueInput`).value = hsl.h; document.getElementById(`${typePrefix}SatSlider`).value = document.getElementById(`${typePrefix}SatInput`).value = hsl.s; document.getElementById(`${typePrefix}LigSlider`).value = document.getElementById(`${typePrefix}LigInput`).value = hsl.l; blockSliderUpdates = false; return `rgb(${r}, ${g}, ${b})`; }
    function updateColorAndLayoutPreviews() { const currentBgColor = syncHslFromRgb('bg'); const currentTextColor = syncHslFromRgb('text'); const currentLogoLayout = { sizePercent: parseInt(logoSizeSlider.value), positionPercent: parseInt(logoPosSlider.value) }; const currentLayoutSettings = { leftBasisPercent: parseInt(layoutSplitSlider.value), logoBasisPercent: parseInt(layoutLogoBasisSlider.value), blindsBasisPercent: parseInt(layoutBlindsBasisSlider.value), infoBasisPercent: parseInt(layoutInfoBasisSlider.value) }; if(bgColorPreview)bgColorPreview.style.backgroundColor=currentBgColor; if(textColorPreview){textColorPreview.style.backgroundColor=currentBgColor; textColorPreview.querySelector('span').style.color=currentTextColor;} applyThemeAndLayout(currentBgColor, currentTextColor, currentLogoLayout, currentLayoutSettings); }
    function handleThemeLayoutSliderInput(e){ const id=e.target.id; const inputElement=document.getElementById(id.replace('Slider','Input')); if(inputElement)inputElement.value=e.target.value; if (id.includes('Hue') || id.includes('Sat') || id.includes('Lig')) syncRgbFromHsl(id.startsWith('bg') ? 'bg' : 'text'); else if (id.includes('Red') || id.includes('Green') || id.includes('Blue')) syncHslFromRgb(id.startsWith('bg') ? 'bg' : 'text'); updateColorAndLayoutPreviews(); }
    function handleThemeLayoutNumberInput(e){ const id=e.target.id; const sliderElement=document.getElementById(id.replace('Input','Slider')); let value=parseInt(e.target.value); const min=parseInt(e.target.min||'0'); const max=parseInt(e.target.max||'255'); if(isNaN(value))value=min; value=Math.max(min,Math.min(max,value)); e.target.value=value; if(sliderElement)sliderElement.value=value; if (id.includes('Hue') || id.includes('Sat') || id.includes('Lig')) syncRgbFromHsl(id.startsWith('bg') ? 'bg' : 'text'); else if (id.includes('Red') || id.includes('Green') || id.includes('Blue')) syncHslFromRgb(id.startsWith('bg') ? 'bg' : 'text'); updateColorAndLayoutPreviews(); }
    const themeLayoutSliders = [bgRedSlider, bgGreenSlider, bgBlueSlider, textRedSlider, textGreenSlider, textBlueSlider, logoSizeSlider, logoPosSlider, layoutSplitSlider, layoutLogoBasisSlider, layoutBlindsBasisSlider, layoutInfoBasisSlider, bgHueSlider, bgSatSlider, bgLigSlider, textHueSlider, textSatSlider, textLigSlider]; const themeLayoutInputs = [bgRedInput, bgGreenInput, bgBlueInput, textRedInput, textGreenInput, textBlueInput, logoSizeInput, logoPosInput, layoutSplitInput, layoutLogoBasisInput, layoutBlindsBasisInput, layoutInfoBasisInput, bgHueInput, bgSatInput, bgLigInput, textHueInput, textSatInput, textLigInput];
    function addThemeAndLayoutListeners(){ themeLayoutSliders.forEach(slider=>slider?.addEventListener('input', handleThemeLayoutSliderInput)); themeLayoutInputs.forEach(input=>input?.addEventListener('input', handleThemeLayoutNumberInput)); btnLoadThemeFavorite.addEventListener('click', handleLoadFavorite); btnSaveThemeFavorite.addEventListener('click', handleSaveFavorite); btnDeleteThemeFavorite.addEventListener('click', handleDeleteFavorite); themeFavoritesSelect.addEventListener('change', enableDisableDeleteButton); }
    function removeThemeAndLayoutListeners(){ themeLayoutSliders.forEach(slider=>slider?.removeEventListener('input', handleThemeLayoutSliderInput)); themeLayoutInputs.forEach(input=>input?.removeEventListener('input', handleThemeLayoutNumberInput)); btnLoadThemeFavorite.removeEventListener('click', handleLoadFavorite); btnSaveThemeFavorite.removeEventListener('click', handleSaveFavorite); btnDeleteThemeFavorite.removeEventListener('click', handleDeleteFavorite); themeFavoritesSelect.removeEventListener('change', enableDisableDeleteButton); }
    function populateThemeFavorites() { const favorites = loadThemeFavorites(); themeFavoritesSelect.innerHTML = '<option value="">Velg favoritt...</option>'; favorites.forEach(fav => { const option = document.createElement('option'); option.value = fav.id; option.textContent = fav.name; themeFavoritesSelect.appendChild(option); }); enableDisableDeleteButton(); }
    function enableDisableDeleteButton(){ btnDeleteThemeFavorite.disabled = !themeFavoritesSelect.value; }
    function handleLoadFavorite() { const selectedId = themeFavoritesSelect.value; if (!selectedId) return; const favorites = loadThemeFavorites(); const fav = favorites.find(f => f.id === selectedId); if (fav) { const [bgR, bgG, bgB] = parseRgbString(fav.bg); const bgHSL = rgbToHsl(bgR, bgG, bgB); const [textR, textG, textB] = parseRgbString(fav.text); const textHSL = rgbToHsl(textR, textG, textB); blockSliderUpdates = true; bgRedSlider.value=bgRedInput.value=bgR; bgGreenSlider.value=bgGreenInput.value=bgG; bgBlueSlider.value=bgBlueInput.value=bgB; bgHueSlider.value=bgHueInput.value=bgHSL.h; bgSatSlider.value=bgSatInput.value=bgHSL.s; bgLigSlider.value=bgLigInput.value=bgHSL.l; textRedSlider.value=textRedInput.value=textR; textGreenSlider.value=textGreenInput.value=textG; textBlueSlider.value=textBlueInput.value=textB; textHueSlider.value=textHueInput.value=textHSL.h; textSatSlider.value=textSatInput.value=textHSL.s; textLigSlider.value=textLigInput.value=textHSL.l; blockSliderUpdates = false; updateColorAndLayoutPreviews(); logActivity(state.live.activityLog, `Lastet tema: ${fav.name}`); } }
    function handleSaveFavorite() { const name = newThemeFavoriteNameInput.value.trim(); const currentBgColor = `rgb(${bgRedInput.value}, ${bgGreenInput.value}, ${bgBlueInput.value})`; const currentTextColor = `rgb(${textRedInput.value}, ${textGreenInput.value}, ${textBlueInput.value})`; const savedFav = addThemeFavorite(name, currentBgColor, currentTextColor); newThemeFavoriteNameInput.value = ''; populateThemeFavorites(); themeFavoritesSelect.value = savedFav.id; enableDisableDeleteButton(); alert(`Tema '${savedFav.name}' lagret!`); }
    function handleDeleteFavorite() { const selectedId = themeFavoritesSelect.value; if (!selectedId) return; const favorites = loadThemeFavorites(); const fav = favorites.find(f => f.id === selectedId); if (fav && confirm(`Slette favorittema '${fav.name}'?`)) { deleteThemeFavorite(selectedId); populateThemeFavorites(); } }
    function handleSaveEditedSettings(){ console.log("Saving edits..."); let changesMade=false; let needsUIUpdate=false; const cLI=state.live.currentLevelIndex; let overallValid=true; const newBlindLevels=[]; const editBlindRows=editBlindStructureBody.querySelectorAll('tr'); if(editBlindRows.length===0){alert("Minst ett nivå kreves.");return;} editBlindRows.forEach((row,index)=>{ const levelNum=index+1; let rowValid=true; const sbInput=row.querySelector('.sb-input'); const bbInput=row.querySelector('.bb-input'); const anteInput=row.querySelector('.ante-input'); const durationInput=row.querySelector('.duration-input'); const pauseInput=row.querySelector('.pause-duration-input'); const sb=parseInt(sbInput.value); const bb=parseInt(bbInput.value); const ante=parseInt(anteInput.value)||0; const duration=parseInt(durationInput.value); const pauseMinutes=parseInt(pauseInput.value)||0; const isPastLevel=levelNum<=cLI+1&&!state.live.isOnBreak; [sbInput,bbInput,anteInput,durationInput,pauseInput].forEach(el=>el.classList.remove('invalid')); if(!isPastLevel){if(isNaN(duration)||duration<=0){rowValid=false;durationInput.classList.add('invalid');} if(isNaN(sb)||sb<0){rowValid=false;sbInput.classList.add('invalid');} if(isNaN(bb)||bb<=0){rowValid=false;bbInput.classList.add('invalid');} else if(bb>0&&sb<=0){rowValid=false;sbInput.classList.add('invalid');} else if(bb>0&&sb!==roundToNearestValid(Math.floor(bb/2),100)){rowValid=false;sbInput.classList.add('invalid'); bbInput.classList.add('invalid');} if(isNaN(ante)||ante<0){rowValid=false;anteInput.classList.add('invalid');} if(isNaN(pauseMinutes)||pauseMinutes<0){rowValid=false;pauseInput.classList.add('invalid');}} if(!rowValid)overallValid=false; newBlindLevels.push({level:levelNum,sb:sb,bb:bb,ante:ante,duration:duration,pauseMinutes:pauseMinutes});}); if(!overallValid){alert("Ugyldige verdier i blindstruktur."); applyThemeAndLayout(originalThemeBg, originalThemeText, originalLogoLayout, originalLayoutSettings); return;} if(JSON.stringify(state.config.blindLevels)!==JSON.stringify(newBlindLevels)){state.config.blindLevels=newBlindLevels; changesMade=true; needsUIUpdate=true; logActivity(state.live.activityLog,"Blindstruktur endret.");}
        const newPaidPlaces=parseInt(editPaidPlacesInput.value); const newPrizeDist=editPrizeDistTextarea.value.split(',').map(p=>parseFloat(p.trim())).filter(p=>!isNaN(p)&&p>=0); let prizesValid=true; if(isNaN(newPaidPlaces)||newPaidPlaces<=0){prizesValid=false;alert("Ugyldig antall betalte.");}else if(newPrizeDist.length!==newPaidPlaces){prizesValid=false;alert("Antall %!=Antall betalte.");}else{const sum=newPrizeDist.reduce((a,b)=>a+b,0); if(Math.abs(sum-100)>0.1){prizesValid=false;alert(`% sum (${sum.toFixed(1)})!=100.`);}} if(prizesValid&&(state.config.paidPlaces!==newPaidPlaces||JSON.stringify(state.config.prizeDistribution)!==JSON.stringify(newPrizeDist))){const pIM=state.live.eliminatedPlayers.filter(p=>p.place<=state.config.paidPlaces).length; if(pIM===0||confirm(`Advarsel: ${pIM} i pengene. Endre premier?`)){state.config.paidPlaces=newPaidPlaces; state.config.prizeDistribution=newPrizeDist; changesMade=true; needsUIUpdate=true; logActivity(state.live.activityLog,"Premiestruktur endret.");}else{prizesValid=false;}} if(!overallValid||!prizesValid){console.warn("Edits not saved."); applyThemeAndLayout(originalThemeBg, originalThemeText, originalLogoLayout, originalLayoutSettings); return;}
        const finalBgColor=`rgb(${bgRedInput.value}, ${bgGreenInput.value}, ${bgBlueInput.value})`; const finalTextColor=`rgb(${textRedInput.value}, ${textGreenInput.value}, ${textBlueInput.value})`; const finalLogoLayout={sizePercent: parseInt(logoSizeInput.value), positionPercent: parseInt(logoPosInput.value)}; const finalLayoutSettings = { leftBasisPercent: parseInt(layoutSplitInput.value), logoBasisPercent: parseInt(layoutLogoBasisInput.value), blindsBasisPercent: parseInt(layoutBlindsBasisInput.value), infoBasisPercent: parseInt(layoutInfoBasisInput.value) };
        if(finalBgColor!==originalThemeBg||finalTextColor!==originalThemeText){saveThemeBgColor(finalBgColor); saveThemeTextColor(finalTextColor); logActivity(state.live.activityLog, "Fargetema lagret."); changesMade=true; /* Apply happens below */ } if(finalLogoLayout.sizePercent!==originalLogoLayout.sizePercent || finalLogoLayout.positionPercent!==originalLogoLayout.positionPercent){saveLogoLayout(finalLogoLayout); logActivity(state.live.activityLog, "Logo layout lagret."); changesMade=true; } if(finalLayoutSettings.leftBasisPercent !== originalLayoutSettings.leftBasisPercent || finalLayoutSettings.logoBasisPercent !== originalLayoutSettings.logoBasisPercent || finalLayoutSettings.blindsBasisPercent !== originalLayoutSettings.blindsBasisPercent || finalLayoutSettings.infoBasisPercent !== originalLayoutSettings.infoBasisPercent) { saveLayoutSettings(finalLayoutSettings); logActivity(state.live.activityLog, "Layout instillinger lagret."); changesMade = true; }
        if(changesMade){applyThemeAndLayout(finalBgColor, finalTextColor, finalLogoLayout, finalLayoutSettings); /* Apply all final settings */ if(saveTournamentState(currentTournamentId,state)){alert("Endringer lagret!"); if(needsUIUpdate)updateUI(); closeEditModal(false);}else{alert("Lagring feilet!"); applyThemeAndLayout(originalThemeBg, originalThemeText, originalLogoLayout, originalLayoutSettings);}}else{alert("Ingen endringer å lagre."); closeEditModal(false);}}
    // === 12: EVENT HANDLERS - MODAL & EDIT SETTINGS END ===

    // === 13: TOURNAMENT FINISH LOGIC START ===
    function finishTournament() { /* ... */ if(state.live.status==='finished')return; console.log("Finishing T..."); clearInterval(timerInterval); timerInterval=null; clearInterval(realTimeInterval); realTimeInterval=null; state.live.status='finished'; state.live.isOnBreak=false; if(state.live.players.length===1){const winner=state.live.players[0]; winner.place=1; state.live.eliminatedPlayers.push(winner); state.live.players.splice(0,1); logActivity(state.live.activityLog,`Vinner: ${winner.name}!`);} else if(state.live.players.length===0){logActivity(state.live.activityLog,`Turnering fullført (ingen aktive).`);} else{logActivity(state.live.activityLog,`Turnering fullført (${state.live.players.length} igjen - Chop?).`);} state.live.eliminatedPlayers.sort((a,b)=>(a.place??Infinity)-(b.place??Infinity)); console.log("Tournament finished!"); updateUI(); saveTournamentState(currentTournamentId,state); alert("Turneringen er fullført!"); }
    // === 13: TOURNAMENT FINISH LOGIC END ===

    // === 14: EVENT LISTENER ATTACHMENT (General) START ===
    startPauseButton.addEventListener('click', handleStartPause); prevLevelButton.addEventListener('click', ()=>handleAdjustLevel(-1)); nextLevelButton.addEventListener('click', ()=>handleAdjustLevel(1)); adjustTimeMinusButton.addEventListener('click', ()=>handleAdjustTime(-60)); adjustTimePlusButton.addEventListener('click', ()=>handleAdjustTime(60)); lateRegButton.addEventListener('click', handleLateRegClick); endTournamentButton.addEventListener('click', handleEndTournament); btnForceSave.addEventListener('click', handleForceSave); btnBackToMainLive.addEventListener('click', handleBackToMain); btnEditSettings.addEventListener('click', openEditModal); closeModalButton.addEventListener('click', ()=>closeEditModal(true)); btnCancelEditSettings.addEventListener('click', ()=>closeEditModal(true)); modal.addEventListener('click', (e)=>{if(e.target===modal)closeEditModal(true);}); btnAddEditLevel.addEventListener('click', ()=>addEditBlindLevelRow()); btnGenerateEditPayout.addEventListener('click', generateEditPayout); btnSaveEditedSettings.addEventListener('click', handleSaveEditedSettings);
    // === 14: EVENT LISTENER ATTACHMENT (General) END ===

    // === 15: INITIAL UI RENDER & TIMER START ===
    if(!state.live.activityLog) state.live.activityLog = []; console.log("Rendering initial UI..."); updateUI(); startRealTimeClock(); if(state.live.status === 'running') { timerInterval = setInterval(tick, 1000); } else if (state.live.status === 'finished') { finishTournament(); }
    // === 15: INITIAL UI RENDER & TIMER START ===
});
// === 01: DOMContentLoaded LISTENER END ===
